<div class="container-fluid content-inner mt-n5 py-0">
  <div class="row">
      <div class="col-sm-12">
          <div class="card">
              <div class="container text-center">
                  <h4 class="text-responsive mb-3 mt-3">Personal</h4>
                  <div class="row justify-content-center gx-2">
                      <!-- Botón Nuevo -->
                      <div class="col-auto">
                        <button type="button" class="btn btn-primary rounded-pill w-auto"
                            style="padding: 4px 12px; font-size: 12px;" onclick="window.location.href='/agregar-personal';">
                            Nuevo
                        </button>
                    </div>
                      <!-- Botón Activar Edición -->
                      <div class="col-auto">
                          <button id="toggleEditMode" class="btn btn-primary rounded-pill w-auto"
                              style="padding: 4px 12px; font-size: 12px;">
                              <i class="fas fa-edit me-1"></i> Activar Edición
                          </button>
                      </div>
              
                     
                  </div>
              </div>
              <div class="card-body">
                  <div class="test-container">
                      <div class="test-header d-flex align-items-center">
                          <!-- Radio para 'Todos' -->
                          <div class="form-check form-check-inline">
                              <input type="radio" class="form-check-input" name="filter" id="all" onchange="externalFilterChanged('all')" checked>
                              <label for="all" class="form-check-label pl-2">Todos</label>
                          </div>
                          <div class="form-check form-check-inline">
                              <input type="radio" class="form-check-input" name="filter" id="cctsSaleEntra" onchange="externalFilterChanged('cctsSaleEntra')">
                              <label for="cctsSaleEntra" class="form-check-label pl-2">CCTs sale y entra</label>
                          </div>
                          
                      </div>
                      <div id="myGrid" class="ag-theme-quartz" style="width: 100%"></div>
                  </div>
              </div>
          </div>
      </div>
  </div>
</div>
  <!--Crear-->
<script type="module">
  import { getStatusClass,statusRenderer,  funcionPost, editarCelda, createValidatedValueSetter, createSelectColumnProps, borrarColumna,  } from "./js/AgGrid/config.js";

  let gridApi;
  let editMode = false;

  const notyf = new Notyf();

  class ImageRenderer {
    eGui;
  
    init(params) {
      const personalImage = document.createElement("img");
  
      if (params.value) {
        personalImage.src = `/uploads/${params.value}`;
      } else {
        personalImage.src = "/uploads/default.jpg"; // Imagen predeterminada
      }
  
      personalImage.setAttribute(
        "style",
        "display: block; width: 50px; height: 50px; border-radius: 50%; margin: auto;"
      );
  
      this.eGui = personalImage;
    }
  
    getGui() {
      return this.eGui;
    }
  
    refresh(params) {
      return false;
    }
  }
  


  const datos = [
  { field: "personal_id", headerName: "ID", width: 70, editable: false,
  cellClass: "centrar-celda"  },
  {
    field: "imagen",
    headerName: "Imagen",
    width: 100,
    editable: false,
    cellRenderer: ImageRenderer,
    cellClass: "centrar-celda"
  },
  { field: "nombre", headerName: "Nombre", width: 300, editable: () => editMode,cellClass: "centrar-celda" },
  {field: "edad", headerName: "Edad", width: 70, wrapHeaderText: true,cellClass: "centrar-celda"},
  {field: "telefono", headerName: "Teléfono",editable: () => editMode, minWidth: 100, wrapHeaderText: true,cellClass: "centrar-celda"},
  {field: "correo", headerName: "Correo", editable: () => editMode, minWidth: 200, wrapHeaderText: true,cellClass: "centrar-celda"},
  { field: "rfc", headerName: "RFC", width: 150, editable: false,cellClass: "centrar-celda" },
  { field: "cargo", headerName: "cargo", editable: () => editMode, cellClass: "centrar-celda"},
  {
    field: "Accion",
    headerName: "Acción",
    width: 900,
    editable: false,
    cellClass: "centrar-celda",
    cellRenderer: (params) => {
      if (!params.data || !params.data.personal_id) {
        return null;
      }

      const deleteButton = document.createElement('a');
      deleteButton.className = 'btn btn-sm btn-icon text-primary';
      deleteButton.setAttribute('data-bs-toggle', 'tooltip');
      deleteButton.setAttribute('title', 'Eliminar Personal');
      deleteButton.style.cursor = 'pointer';

      deleteButton.innerHTML = `
        <span class="btn-inner">
            <svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor">
                <path d="M19.3248 9.46826C19.3248 9.46826 18.7818 16.2033 18.4668 19.0403C18.3168 20.3953 17.4798 21.1893 16.1088 21.2143C13.4998 21.2613 10.8878 21.2643 8.27979 21.2093C6.96079 21.1823 6.13779 20.3783 5.99079 19.0473C5.67379 16.1853 5.13379 9.46826 5.13379 9.46826" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                <path d="M20.708 6.23975H3.75" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                <path d="M17.4406 6.23973C16.6556 6.23973 15.9796 5.68473 15.8256 4.91573L15.5826 3.69973C15.4326 3.13873 14.9246 2.75073 14.3456 2.75073H10.1126C9.53358 2.75073 9.02558 3.13873 8.87558 3.69973L8.63258 4.91573C8.47858 5.68473 7.80258 6.23973 7.01758 6.23973" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
            </svg>
        </span>
      `;

      deleteButton.addEventListener('click', async () => {
        const result = await Swal.fire({
          title: '¿Deseas eliminar este personal?',
          text: 'Esta acción no se puede deshacer.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Sí, eliminar',
          cancelButtonText: 'Cancelar',
          reverseButtons: true
        });

        if (result.isConfirmed) {
          try {
            const personalId = params.data.personal_id;

            const response = await fetch('/deletePersonal', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ personal_id: personalId }),
            });

            if (response.ok) {
              params.api.applyTransaction({ remove: [params.node.data] });

              notyf.success({
                message: 'Personal eliminado exitosamente',
                duration: 2000,
                position: { x: 'right', y: 'top' }
              });
            } else {
              const error = await response.json();
              alert(`Error: ${error.message}`);
            }
          } catch {
            alert('Error al comunicarse con el servidor.');
          }
        }
      });

      return deleteButton;
    }
  }
];

  const gridOptions = {
      columnDefs: datos,
      defaultColDef: {editable: true,resizable: true,},
      cellStyle: { textAlign: "center" },
      rowData: null,
      rowHeight: 75,
      domLayout: "autoHeight",
      context: {
          endpoint: "/editarListaPanelAdm",
      },
      onCellValueChanged: editarCelda,
  };

  const initializeGrid = async () => {
   const gridDiv = document.querySelector("#myGrid");
   gridApi = agGrid.createGrid(gridDiv, gridOptions);

   try {
       // Obtén los datos desde el backend
       const data = await fetch("/getlistaPanelAdm").then((response) => response.json());

       // Agrega el campo `tabla` dinámicamente
       const rowData = data.map((row) => ({
           ...row,
           tabla: "personal", // Nombre de la tabla a la que pertenece esta fila
       }));

       // Asigna los datos al grid
       gridApi.setGridOption("rowData", rowData); // Asegúrate de usar `rowData` con `tabla` agregado
   } catch (error) {
       console.error("Error inicializando la tabla:", error);
   }
};

  document.querySelector("#toggleEditMode").addEventListener("click", async () => {
      if (editMode) {
          if (confirm("¿Estás seguro de los cambios?")) {
              editMode = false;
              const button = document.querySelector("#toggleEditMode");
              button.innerHTML = '<i class="fas fa-edit me-2"></i>Activar Edición';
              gridApi.refreshCells({ force: true }); // Refrescar las celdas
  
              // Recargar datos desde el servidor
              await reloadData();
          }
      } else {
          editMode = true;
          const button = document.querySelector("#toggleEditMode");
          button.innerHTML = '<i class="fas fa-times me-2"></i>Finalizar Edición';
          gridApi.refreshCells({ force: true }); // Refrescar las celdas para aplicar edición
      }
  });

  document.addEventListener("DOMContentLoaded", initializeGrid);
</script>
